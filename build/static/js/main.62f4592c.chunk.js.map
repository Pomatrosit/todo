{"version":3,"sources":["components/TodoItem.js","components/TodoList.js","components/addTodo.js","App.js","serviceWorker.js","redux/rootReducer.js","index.js"],"names":["connect","dispatch","toggleTodoItem","id","type","payload","removeTodoItem","props","classNames","isCompleted","push","className","join","onClick","caption","aria-hidden","state","todos","list","map","todo","key","style","width","margin","length","textAlign","color","addTodoItem","text","useState","setText","disabled","onSubmit","e","preventDefault","onChange","target","value","App","Boolean","window","location","hostname","match","setTodosToLocalStorage","localStorage","setItem","JSON","stringify","initialState","parse","getItem","store","createStore","action","newTodos","filter","Date","now","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.62f4592c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./todoItem.css\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst TodoItem = props => {\r\n  const classNames = [\"todo-caption\"];\r\n\r\n  if (props.isCompleted) classNames.push(\"completed\");\r\n\r\n  return(\r\n     <div className=\"todo-item\">\r\n         <p\r\n           className={classNames.join(\" \")}\r\n           onClick={() => props.toggleTodoItem(props.id)}\r\n           >{props.caption}\r\n         </p>\r\n\r\n         <i\r\n           className=\"fa fa-thumbs-up\"\r\n           aria-hidden=\"true\"\r\n           onClick={() => props.toggleTodoItem(props.id)}\r\n           ></i>\r\n\r\n         <div className=\"todo-cross\" onClick = {() => props.removeTodoItem(props.id)}>\r\n            <span className=\"todo-cross__span todo-cross__span1\"></span>\r\n            <span className=\"todo-cross__span todo-cross__span2\"></span>\r\n         </div>\r\n\r\n     </div>\r\n  )\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return{\r\n    toggleTodoItem: id => dispatch({type:\"TOGGLE_TODO_ITEM\", payload:id}),\r\n    removeTodoItem: id => dispatch({type:\"REMOVE_TODO_ITEM\", payload:id})\r\n  }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(TodoItem);\r\n","import React from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nconst TodoList = props =>{\r\n\r\n  const list = props.todos.map(todo =>\r\n    <TodoItem\r\n     key = {todo.id}\r\n     id = {todo.id}\r\n     caption={todo.caption}\r\n     isCompleted={todo.isCompleted}\r\n  />\r\n\r\n  );\r\n\r\n  return(\r\n    <div style={{width:\"50%\", margin:\"0 auto 10rem auto\"}}>\r\n\r\n      { props.todos.length\r\n              ? list\r\n              : <p style={{textAlign:\"center\", color:\"#606060\"}}>У вас нет заданий</p>}\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    todos:state.todos\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(TodoList);\r\n","import React, {useState} from \"react\";\r\nimport \"./addTodo.css\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst AddTodo = props => {\r\n\r\n  let [text, setText] = useState(\"\");\r\n\r\n  const submitFormHandler = (e) => {\r\n    e.preventDefault();\r\n    props.addTodoItem(text);\r\n    setText(\"\");\r\n  }\r\n\r\n  const disabled = text.length>=2 ? false :true;\r\n\r\n  return (\r\n    <div className = \"add-todo\">\r\n       <form className= \"add-todo-inner\" onSubmit= {submitFormHandler}>\r\n         <input\r\n           className=\"add-todo-input\"\r\n           type=\"text\"\r\n           onChange = {e => setText(e.target.value)}\r\n           value = {text}\r\n           />\r\n         <button type=\"submit\"\r\n           className=\"btn btn-primary\"\r\n           disabled = {disabled}\r\n           >Add todo</button>\r\n       </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapDispatchToprops = dispatch => {\r\n  return{\r\n    addTodoItem:text => dispatch({type:\"ADD_TODO_ITEM\", payload:text})\r\n  }\r\n}\r\n\r\nexport default connect(null, mapDispatchToprops)(AddTodo);\r\n","import React from 'react';\nimport \"./App.css\";\nimport TodoList from \"./components/TodoList\";\nimport AddTodo from \"./components/addTodo\";\n\n\nfunction App() {\n  return (\n    <div className=\"wrapper\">\n      <h1 className=\"title\">Todos</h1>\n      <hr/>\n      <TodoList />\n      <AddTodo />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const setTodosToLocalStorage = (todos) =>{\r\n  localStorage.setItem(\"todos\", JSON.stringify(todos));\r\n}\r\n\r\nconst getTodosFromLocalStorage = () =>{\r\n  return JSON.parse(localStorage.getItem(\"todos\") || \"[]\");\r\n}\r\n\r\nconst initialState = {\r\n  todos:getTodosFromLocalStorage()\r\n}\r\n\r\n\r\nexport default function rootReducer(state = initialState, action){\r\n\r\n  switch (action.type) {\r\n    case \"TOGGLE_TODO_ITEM\":{\r\n      const id = action.payload;\r\n      const newTodos = state.todos.map(todo => {\r\n        if (todo.id === id) todo.isCompleted = !todo.isCompleted;\r\n        return todo;\r\n      });\r\n      setTodosToLocalStorage(newTodos);\r\n      return {todos: newTodos};\r\n    }\r\n\r\n    case \"REMOVE_TODO_ITEM\":{\r\n      const id = action.payload;\r\n      const newTodos = state.todos.filter(todo => {\r\n        return todo.id !== id;\r\n      });\r\n      setTodosToLocalStorage(newTodos);\r\n      return {todos: newTodos};\r\n    }\r\n\r\n    case \"ADD_TODO_ITEM\":{\r\n      const text = action.payload;\r\n      const newTodos = [...state.todos];\r\n      newTodos.push({id:Date.now(), caption:text, isCompleted:false});\r\n      setTodosToLocalStorage(newTodos);\r\n      return {todos: newTodos};\r\n    }\r\n\r\n\r\n    default: return state\r\n  }\r\n\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore} from \"redux\";\nimport {Provider} from \"react-redux\";\nimport rootReducer from \"./redux/rootReducer\";\n\nconst store = createStore(rootReducer);\n\n\nReactDOM.render(\n  <React.StrictMode>\n     <Provider store = {store} >\n        <App />\n     </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}